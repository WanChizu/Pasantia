/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pasantia_proyect;

import Controladores.Factura.ActualizarFactura;
import Controladores.Factura.AgregarFactura;
import Controladores.Factura.DatabaseManager;
import Controladores.Factura.VerFactura;

import entidades.Factura;

import errores.ErrorGeneral;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import jdk.internal.org.objectweb.asm.tree.analysis.Value;
import utill.FuncionesGenerales;

/**
 *
 * @author A19B59953
 */
public class AgregarEditarVerFactura extends javax.swing.JFrame {
    
    public final static int AGREGAR = 1;
    public final static int EDITAR = 2;
    public final static int VER = 3;
    int opcion;
    private int facturaId;
   

    /**
     * Creates new form AgregarEditarVerFactura
     */
    public AgregarEditarVerFactura() {
        initComponents();
        setLocationRelativeTo(null);
        this.setResizable(false);
       
    }
    
   
    public AgregarEditarVerFactura(int opcion, int facturaId)throws SQLException{
    this.opcion = opcion;
    this.facturaId = facturaId;
    initComponents();
    
    
    ArrayList<ErrorGeneral> errores = new ArrayList<>();
   

    
    switch (opcion){
    case AGREGAR:
    createParaAgregar();
    break;
    case EDITAR:
    createParaEditar();
    break;
    case VER:
    createParaVer();
    break;
    default:
    break;
    
    }
 
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbl_titulo = new javax.swing.JLabel();
        lbl_nombre1 = new javax.swing.JLabel();
        lbl_nombre2 = new javax.swing.JLabel();
        lbl_nombre3 = new javax.swing.JLabel();
        lbl_nombre4 = new javax.swing.JLabel();
        lbl_nombre5 = new javax.swing.JLabel();
        fecha = new com.toedter.calendar.JDateChooser();
        combo_a = new javax.swing.JComboBox<>();
        combo_c = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        btnagregar = new javax.swing.JButton();
        btnregresar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_comentario = new javax.swing.JTextArea();
        combo_p = new javax.swing.JComboBox<>();
        lbl_nombre6 = new javax.swing.JLabel();
        txt_monto = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 153, 0));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_titulo.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lbl_titulo.setForeground(new java.awt.Color(255, 255, 255));
        lbl_titulo.setText("AGREGAR FACTURA");
        lbl_titulo.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                lbl_titulover(evt);
            }
        });
        jPanel2.add(lbl_titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 32, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -4, 500, 80));

        lbl_nombre1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lbl_nombre1.setText("Comentario");
        jPanel1.add(lbl_nombre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, -1, -1));

        lbl_nombre2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lbl_nombre2.setText("Areas");
        jPanel1.add(lbl_nombre2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 190, -1, -1));

        lbl_nombre3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lbl_nombre3.setText("Fecha");
        jPanel1.add(lbl_nombre3, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, -1, -1));

        lbl_nombre4.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lbl_nombre4.setText("categoria");
        jPanel1.add(lbl_nombre4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        lbl_nombre5.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lbl_nombre5.setText("Monto");
        jPanel1.add(lbl_nombre5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, -1, -1));

        fecha.setDateFormatString("yyyy-MMM-dd");
        jPanel1.add(fecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 90, 140, 30));

        combo_a.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(combo_a, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 220, 190, 30));

        combo_c.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(combo_c, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 220, 30));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 220, 20));

        btnagregar.setBackground(new java.awt.Color(51, 102, 0));
        btnagregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconagregar.png"))); // NOI18N
        btnagregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnagregarActionPerformed(evt);
            }
        });
        jPanel1.add(btnagregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 490, -1, -1));

        btnregresar.setBackground(new java.awt.Color(51, 102, 0));
        btnregresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconregreso.png"))); // NOI18N
        btnregresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnregresarActionPerformed(evt);
            }
        });
        jPanel1.add(btnregresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 490, -1, -1));

        txt_comentario.setColumns(20);
        txt_comentario.setRows(5);
        jScrollPane2.setViewportView(txt_comentario);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, 450, 80));

        combo_p.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel1.add(combo_p, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 220, 30));

        lbl_nombre6.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lbl_nombre6.setText("proveedor");
        jPanel1.add(lbl_nombre6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, -1, -1));

        txt_monto.setBorder(null);
        txt_monto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.##"))));
        txt_monto.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txt_monto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_montoActionPerformed(evt);
            }
        });
        jPanel1.add(txt_monto, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, 230, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lbl_titulover(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_lbl_titulover

    }//GEN-LAST:event_lbl_titulover

    private void btnagregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnagregarActionPerformed
       if (opcion == AGREGAR) {
           try {
               agregarFactura();
           } catch (SQLException ex) {
               Logger.getLogger(AgregarEditarVerFactura.class.getName()).log(Level.SEVERE, null, ex);
           }
        } else if (opcion == EDITAR) {
           try {
               editarFactura();
           } catch (SQLException ex) {
               Logger.getLogger(AgregarEditarVerFactura.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
    }//GEN-LAST:event_btnagregarActionPerformed

    private void btnregresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnregresarActionPerformed
    this.setVisible(false);
    fac f = fac.obtenerInstanciaPrincipal();
    f.setVisible(true);
    f.actualizarTabla();
    }//GEN-LAST:event_btnregresarActionPerformed

    private void txt_montoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_montoActionPerformed

    }//GEN-LAST:event_txt_montoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      try {
    ArrayList<ErrorGeneral> errores = new ArrayList<>();
    new AgregarEditarVerFactura(AgregarEditarVerFactura.AGREGAR, 1).setVisible(true);
    //new AgregarEditarVerFactura(AgregarEditarVerFactura.EDITAR, 6).setVisible(true);
    //new AgregarEditarVerFactura(AgregarEditarVerFactura.VER, 1).setVisible(true);
    }catch (SQLException e) {
    }
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnagregar;
    private javax.swing.JButton btnregresar;
    private javax.swing.JComboBox<String> combo_a;
    private javax.swing.JComboBox<String> combo_c;
    private javax.swing.JComboBox<String> combo_p;
    private com.toedter.calendar.JDateChooser fecha;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lbl_nombre1;
    private javax.swing.JLabel lbl_nombre2;
    private javax.swing.JLabel lbl_nombre3;
    private javax.swing.JLabel lbl_nombre4;
    private javax.swing.JLabel lbl_nombre5;
    private javax.swing.JLabel lbl_nombre6;
    private javax.swing.JLabel lbl_titulo;
    private javax.swing.JTextArea txt_comentario;
    private javax.swing.JFormattedTextField txt_monto;
    // End of variables declaration//GEN-END:variables

    private void createParaAgregar() {
    lbl_titulo.setText("AGREGAR FACTURA");

    try {
        Map<Integer, String> proveedores = DatabaseManager.obtenerProveedores();
        Map<Integer, String> categorias = DatabaseManager.obtenerCategorias();
        Map<Integer, String> areas = DatabaseManager.obtenerAreas();

        for (Map.Entry<Integer, String> entry : proveedores.entrySet()) {
            combo_p.addItem(entry.getValue());
        }

        for (Map.Entry<Integer, String> entry : categorias.entrySet()) {
            combo_c.addItem(entry.getValue());
        }
        for (Map.Entry<Integer, String> entry : areas.entrySet()) {
            combo_a.addItem(entry.getValue());
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
     ArrayList<ErrorGeneral> errores = new ArrayList<>();
}


    private void createParaEditar() throws SQLException {
    lbl_titulo.setText("EDITAR FACTURA");
    btnagregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/iconeditar.png")));
   
    
    
    try {
        Map<Integer, String> proveedores = DatabaseManager.obtenerProveedores();
        Map<Integer, String> categorias = DatabaseManager.obtenerCategorias();
        Map<Integer, String> areas = DatabaseManager.obtenerAreas();


        for (Map.Entry<Integer, String> entry : proveedores.entrySet()) {
            combo_p.addItem(entry.getValue());
        }

        for (Map.Entry<Integer, String> entry : categorias.entrySet()) {
            combo_c.addItem(entry.getValue());
        }
        
         for (Map.Entry<Integer, String> entry : areas.entrySet()) {
            combo_a.addItem(entry.getValue());
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
     ArrayList<ErrorGeneral> errores = new ArrayList<>();
     rellenarVentana(facturaId, errores);  
    }

    private void createParaVer() throws SQLException {
    lbl_titulo.setText("VER FACTURA");
    fecha.setDateFormatString("dd/MM/yyyy");
    
    try {
        Map<Integer, String> proveedores = DatabaseManager.obtenerProveedores();
        Map<Integer, String> categorias = DatabaseManager.obtenerCategorias();
        Map<Integer, String> areas = DatabaseManager.obtenerAreas();

        for (Map.Entry<Integer, String> entry : proveedores.entrySet()) {
            combo_p.addItem(entry.getValue());
        }

        for (Map.Entry<Integer, String> entry : categorias.entrySet()) {
            combo_c.addItem(entry.getValue());
        }
         for (Map.Entry<Integer, String> entry : areas.entrySet()) {
            combo_a.addItem(entry.getValue());
        }

      
        txt_monto.setEditable(false);
        txt_comentario.setEditable(false);
        combo_a.setEnabled(false);
        combo_p.setEnabled(false);
        combo_c.setEnabled(false);
        fecha.setEnabled(false);
        btnagregar.setEnabled(false);
    } catch (SQLException e) {
        e.printStackTrace();
    }
          
    ArrayList<ErrorGeneral> errores = new ArrayList<>();
    rellenarVentana(facturaId, errores);  
    }
    
    private void rellenarVentana(int facturaId, ArrayList<ErrorGeneral> errores) throws SQLException {
    Factura factura = VerFactura.verFactura(facturaId, errores);

    if (factura != null) {
      
        fecha.setDate(java.sql.Date.valueOf(factura.getFecha().plusDays(1))); 
        txt_monto.setText(factura.getMonto().toString());
        txt_comentario.setText(factura.getComentario());
        


         String proveedorNombre = DatabaseManager.obtenerProveedores().get(factura.getProveedorId());
        if (proveedorNombre != null) {
            combo_p.setSelectedItem(proveedorNombre);
        }
        
         String categoriaNombre = DatabaseManager.obtenerCategorias().get(factura.getCategoriaId());
        if (categoriaNombre != null) {
            combo_c.setSelectedItem(categoriaNombre);
        }

       
        String areaNombre = DatabaseManager.obtenerAreas().get(factura.getAreaId());
        if (areaNombre != null) {
            combo_a.setSelectedItem(areaNombre);
        }
    } else {
        System.out.println("Factura no encontrada para el ID: " + facturaId);
    }
}

    
   private void editarFactura() throws SQLException {
    String montoTexto = txt_monto.getText();
    
   
    if (montoTexto.isEmpty() || !montoTexto.matches("^\\d*\\.?\\d*$")) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese un valor numérico válido para el monto", "Error", JOptionPane.ERROR_MESSAGE);
        return; 
    }

    BigDecimal monto = new BigDecimal(montoTexto);

    int categoriaId = obtenerIdSeleccionado(combo_c, DatabaseManager.obtenerCategorias());
    int proveedorId = obtenerIdSeleccionado(combo_p, DatabaseManager.obtenerProveedores());
    int areaId = obtenerIdSeleccionado(combo_a, DatabaseManager.obtenerAreas());
    LocalDate fechaFactura = fecha.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

    String comentario = txt_comentario.getText();
    fac f = fac.obtenerInstanciaPrincipal();

    Factura facturaAActualizar = new Factura(facturaId, fechaFactura, categoriaId, proveedorId, areaId, comentario, monto);
    ArrayList<ErrorGeneral> errores = new ArrayList<>();

    int filasAfectadas = ActualizarFactura.actualizarFactura(facturaAActualizar, errores);

    if (filasAfectadas > 0) {
        JOptionPane.showMessageDialog(this, "Factura actualizada correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        f.actualizarTabla();
    } else {
        mostrarErrores(errores);
    }
}



    
    private void agregarFactura() throws SQLException {
    ArrayList<ErrorGeneral> errores = new ArrayList<>();
    int categoriaId = obtenerIdSeleccionado(combo_c, DatabaseManager.obtenerCategorias());
    int proveedorId = obtenerIdSeleccionado(combo_p, DatabaseManager.obtenerProveedores());
    int areaId = obtenerIdSeleccionado(combo_a, DatabaseManager.obtenerAreas());
    LocalDate fechaFactura = fecha.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    
    String comentario = txt_comentario.getText();
    BigDecimal monto = new BigDecimal(txt_monto.getText());

    
    Factura nuevaFactura = new Factura(0, fechaFactura, categoriaId, proveedorId, areaId, comentario, monto);

    
    int idFacturaInsertada = AgregarFactura.insertarFactura(nuevaFactura, errores);

    if (idFacturaInsertada != -1) {
        JOptionPane.showMessageDialog(this, "Factura agregada correctamente con ID: " + idFacturaInsertada);
    } else {
       
        StringBuilder mensajeError = new StringBuilder("Error al agregar la factura. Detalles de errores:\n");
        for (ErrorGeneral error : errores) {
            mensajeError.append("- ").append(error.getMensajeError()).append("\n");
        }
        JOptionPane.showMessageDialog(this, mensajeError.toString(), "Error", JOptionPane.ERROR_MESSAGE);
    }  
     mostrarErrores(errores);
}

private int obtenerIdSeleccionado(JComboBox<String> comboBox, Map<Integer, String> map) {
    String selectedItem = comboBox.getSelectedItem().toString();
    for (Map.Entry<Integer, String> entry : map.entrySet()) {
        if (entry.getValue().equals(selectedItem)) {
            return entry.getKey();
        }
    }
    return -1; 
}
    
    
    
 private static void mostrarErrores(ArrayList<ErrorGeneral> errores) {
        if (!errores.isEmpty()) {
            StringBuilder mensaje = new StringBuilder("Se han producido los siguientes errores:\n\n");

            for (ErrorGeneral error : errores) {
                mensaje.append("Error: ").append(error.getMensajeError()).append("\n");
                mensaje.append("Solución: ").append(error.getMensajeSolucion()).append("\n\n");
            }

            JOptionPane.showMessageDialog(null, mensaje.toString(), "Errores", JOptionPane.ERROR_MESSAGE);
        }
    }
 
 


}
